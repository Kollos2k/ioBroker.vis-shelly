{"version":3,"file":"static/js/src_bootstrap_js-webpack_sharing_consume_default_mui_material_styles_mui_material_styles-webp-7f8b21.82c846d5.chunk.js","mappings":"gWAQA,MAAMA,UAAoBC,OAAOC,aAAeC,EAAAA,aAC5C,oBAAOC,GACH,MAAO,CACHC,GAAI,gBACJC,OAAQ,OACRC,YAAa,yBACbC,YAAa,UACbC,QAAS,aACTC,SAAU,CACN,CACIC,KAAM,SACNC,OAAQ,CACJ,CACID,KAAM,OACNE,MAAO,8BACPC,KAAM,SACNC,QAAS,CAAC,MAAO,UAAW,QAC5BC,QAAS,SAIrB,CACIL,KAAM,UACNE,MAAO,iCACPD,OAAQ,CACJ,CACID,KAAM,MACNG,KAAM,KACND,MAAO,iCAMvBI,QAAS,+DAEjB,CAGAC,gBAAAA,GAOI,CAGJC,iBAAAA,GACIC,MAAMD,oBAGNE,KAAKH,kBACT,CAIAd,aAAAA,GACI,OAAOJ,EAAWI,eACtB,CAGAkB,eAAAA,GACID,KAAKH,kBACT,CAIAK,gBAAAA,GAEA,CAIAC,cAAAA,CAAenB,EAAIoB,GAEnB,CAEAC,gBAAAA,CAAiBC,GAGb,OAFAP,MAAMM,iBAAiBC,IAEhBC,EAAAA,EAAAA,KAACC,EAAAA,KAAI,CAACC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAASC,UAClDC,EAAAA,EAAAA,MAACC,EAAAA,YAAW,CAAAF,SAAA,CACPG,EAAAA,KAAKC,EAAE,sBACPhB,KAAKI,MAAMa,OAAO,GAADC,OAAIlB,KAAKI,MAAMe,OAAOC,IAAG,aAGvD,EAGJ,UCtFA,EAbqB,CACjBC,GAAIC,EAAQ,OACZC,GAAID,EAAQ,OACZE,GAAIF,EAAQ,OACZG,GAAIH,EAAQ,OACZI,GAAIJ,EAAQ,OACZK,GAAIL,EAAQ,OACZM,GAAIN,EAAQ,OACZO,GAAIP,EAAQ,OACZQ,GAAIR,EAAQ,OACZ,QAASA,EAAQ,QCFrB,MAAMS,UAAYC,EAAAA,EACdC,WAAAA,CAAY3B,GACRP,MAAMO,GAGNS,EAAAA,KAAKmB,mBAAmBC,EAC5B,CAEAC,YAAAA,GACI,OAAO7B,EAAAA,EAAAA,KAAC5B,EAAU,CACd0D,OAAQrC,KAAKqC,OACb5B,MAAO,CACHC,MAAO,IACPC,OAAQ,KAEZ2B,KAAM,CACF7C,KAAM,QAGlB,EAGJ,WC3BA8C,EAAAA,EAAAA,GAAUR,E","sources":["DemoWidget.jsx","translations.js","App.jsx","bootstrap.js"],"sourcesContent":["import React from 'react';\nimport {\n    Card, CardContent,\n} from '@mui/material';\n\nimport { I18n } from '@iobroker/adapter-react-v5';\nimport { VisRxWidget } from '@iobroker/vis-2-widgets-react-dev';\n\nclass DemoWidget extends (window.visRxWidget || VisRxWidget) {\n    static getWidgetInfo() {\n        return {\n            id: 'tplDemoWidget',\n            visSet: 'demo',\n            visSetLabel: 'vis_2_widgets_template', // Widget set translated label (should be defined only in one widget of set)\n            visSetColor: '#cf00ff',                // Color of widget set. it is enough to set color only in one widget of set\n            visName: 'DemoWidget',                 // Name of widget\n            visAttrs: [\n                {\n                    name: 'common', // group name\n                    fields: [\n                        {\n                            name: 'type',    // name in data structure\n                            label: 'vis_2_widgets_template_type', // translated field label\n                            type: 'select',\n                            options: ['all', 'current', 'days'],\n                            default: 'all',\n                        },\n                    ],\n                },\n                {\n                    name: 'private', // group name\n                    label: 'vis_2_widgets_template_private', // translated group label\n                    fields: [\n                        {\n                            name: 'oid',     // name in data structure\n                            type: 'id',\n                            label: 'vis_2_widgets_template_oid', // translated field label\n                        },\n                    ],\n                },\n                // check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\n            ],\n            visPrev: 'widgets/vis-2-widgets-react-template/img/vis-widget-demo.png',\n        };\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    propertiesUpdate() {\n        // Widget has 3 important states\n        // 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n        //                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n        // 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n        //                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n        // 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n        //                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n    }\n\n    componentDidMount() {\n        super.componentDidMount();\n\n        // Update data\n        this.propertiesUpdate();\n    }\n\n    // Do not delete this method. It is used by vis to read the widget configuration.\n    // eslint-disable-next-line class-methods-use-this\n    getWidgetInfo() {\n        return DemoWidget.getWidgetInfo();\n    }\n\n    // This function is called every time when rxData is changed\n    onRxDataChanged() {\n        this.propertiesUpdate();\n    }\n\n    // This function is called every time when rxStyle is changed\n    // eslint-disable-next-line class-methods-use-this\n    onRxStyleChanged() {\n\n    }\n\n    // This function is called every time when some Object State updated, but all changes lands into this.state.values too\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n    onStateUpdated(id, state) {\n\n    }\n\n    renderWidgetBody(props) {\n        super.renderWidgetBody(props);\n\n        return <Card style={{ width: '100%', height: '100%' }}>\n            <CardContent>\n                {I18n.t('My Demo ioBroker: ')}\n                {this.state.values[`${this.state.rxData.oid}.val`]}\n            </CardContent>\n        </Card>;\n    }\n}\n\nexport default DemoWidget;\n","const translations = {\n    en: require('./i18n/en.json'),\n    de: require('./i18n/de.json'),\n    ru: require('./i18n/ru.json'),\n    pt: require('./i18n/pt.json'),\n    nl: require('./i18n/nl.json'),\n    fr: require('./i18n/fr.json'),\n    it: require('./i18n/it.json'),\n    es: require('./i18n/es.json'),\n    pl: require('./i18n/pl.json'),\n    'zh-cn': require('./i18n/zh-cn.json'),\n};\n\nexport default translations;\n","import React from 'react';\n\nimport WidgetDemoApp from '@iobroker/vis-2-widgets-react-dev/widgetDemoApp';\nimport { i18n as I18n } from '@iobroker/adapter-react-v5';\n\nimport DemoWidget from './DemoWidget';\nimport translations from './translations';\n\nclass App extends WidgetDemoApp {\n    constructor(props) {\n        super(props);\n\n        // init translations\n        I18n.extendTranslations(translations);\n    }\n\n    renderWidget() {\n        return <DemoWidget\n            socket={this.socket}\n            style={{\n                width: 600,\n                height: 200,\n            }}\n            data={{\n                type: 'all',\n            }}\n        />;\n    }\n}\n\nexport default App;\n","import bootstrap from '@iobroker/vis-2-widgets-react-dev/bootstrap';\nimport App from './App';\n\nbootstrap(App);\n"],"names":["DemoWidget","window","visRxWidget","VisRxWidget","getWidgetInfo","id","visSet","visSetLabel","visSetColor","visName","visAttrs","name","fields","label","type","options","default","visPrev","propertiesUpdate","componentDidMount","super","this","onRxDataChanged","onRxStyleChanged","onStateUpdated","state","renderWidgetBody","props","_jsx","Card","style","width","height","children","_jsxs","CardContent","I18n","t","values","concat","rxData","oid","en","require","de","ru","pt","nl","fr","it","es","pl","App","WidgetDemoApp","constructor","extendTranslations","translations","renderWidget","socket","data","bootstrap"],"sourceRoot":""}