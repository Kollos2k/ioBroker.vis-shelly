{"version":3,"file":"static/js/src_DemoWidget_jsx.12b94526.chunk.js","mappings":";mWAQA,MAAMA,UAAoBC,OAAOC,aAAeC,EAAAA,aAC5C,oBAAOC,GACH,MAAO,CACHC,GAAI,gBACJC,OAAQ,OACRC,YAAa,yBACbC,YAAa,UACbC,QAAS,aACTC,SAAU,CACN,CACIC,KAAM,SACNC,OAAQ,CACJ,CACID,KAAM,OACNE,MAAO,8BACPC,KAAM,SACNC,QAAS,CAAC,MAAO,UAAW,QAC5BC,QAAS,SAIrB,CACIL,KAAM,UACNE,MAAO,iCACPD,OAAQ,CACJ,CACID,KAAM,MACNG,KAAM,KACND,MAAO,iCAMvBI,QAAS,+DAEjB,CAGAC,gBAAAA,GAOI,CAGJC,iBAAAA,GACIC,MAAMD,oBAGNE,KAAKH,kBACT,CAIAd,aAAAA,GACI,OAAOJ,EAAWI,eACtB,CAGAkB,eAAAA,GACID,KAAKH,kBACT,CAIAK,gBAAAA,GAEA,CAIAC,cAAAA,CAAenB,EAAIoB,GAEnB,CAEAC,gBAAAA,CAAiBC,GAGb,OAFAP,MAAMM,iBAAiBC,IAEhBC,EAAAA,EAAAA,KAACC,EAAAA,KAAI,CAACC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAASC,UAClDC,EAAAA,EAAAA,MAACC,EAAAA,YAAW,CAAAF,SAAA,CACPG,EAAAA,KAAKC,EAAE,sBACPhB,KAAKI,MAAMa,OAAO,GAADC,OAAIlB,KAAKI,MAAMe,OAAOC,IAAG,aAGvD,EAGJ,2BC1Fa,IAAIC,EAAEC,EAAQ,MAASC,EAAEC,OAAOC,IAAI,iBAAiBC,EAAEF,OAAOC,IAAI,kBAAkBE,EAAEC,OAAOC,UAAUC,eAAeC,EAAEV,EAAEW,mDAAmDC,kBAAkBC,EAAE,CAACC,KAAI,EAAGC,KAAI,EAAGC,QAAO,EAAGC,UAAS,GAChP,SAASC,EAAEC,EAAEC,EAAEC,GAAG,IAAIC,EAAEC,EAAE,CAAC,EAAEC,EAAE,KAAKC,EAAE,KAAiF,IAAIH,UAAhF,IAASD,IAAIG,EAAE,GAAGH,QAAG,IAASD,EAAEN,MAAMU,EAAE,GAAGJ,EAAEN,UAAK,IAASM,EAAEL,MAAMU,EAAEL,EAAEL,KAAcK,EAAEd,EAAEoB,KAAKN,EAAEE,KAAKT,EAAEJ,eAAea,KAAKC,EAAED,GAAGF,EAAEE,IAAI,GAAGH,GAAGA,EAAEQ,aAAa,IAAIL,KAAKF,EAAED,EAAEQ,kBAAe,IAASJ,EAAED,KAAKC,EAAED,GAAGF,EAAEE,IAAI,MAAM,CAACM,SAAS1B,EAAE9B,KAAK+C,EAAEL,IAAIU,EAAET,IAAIU,EAAExC,MAAMsC,EAAEM,OAAOnB,EAAEoB,QAAQ,CAACC,EAAQC,SAAS3B,EAAE0B,EAAQE,IAAIf,EAAEa,EAAQG,KAAKhB,mBCPxWiB,EAAOJ,QAAU,EAAjBI","sources":["DemoWidget.jsx","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js"],"sourcesContent":["import React from 'react';\nimport {\n    Card, CardContent,\n} from '@mui/material';\n\nimport { I18n } from '@iobroker/adapter-react-v5';\nimport { VisRxWidget } from '@iobroker/vis-2-widgets-react-dev';\n\nclass DemoWidget extends (window.visRxWidget || VisRxWidget) {\n    static getWidgetInfo() {\n        return {\n            id: 'tplDemoWidget',\n            visSet: 'demo',\n            visSetLabel: 'vis_2_widgets_template', // Widget set translated label (should be defined only in one widget of set)\n            visSetColor: '#cf00ff',                // Color of widget set. it is enough to set color only in one widget of set\n            visName: 'DemoWidget',                 // Name of widget\n            visAttrs: [\n                {\n                    name: 'common', // group name\n                    fields: [\n                        {\n                            name: 'type',    // name in data structure\n                            label: 'vis_2_widgets_template_type', // translated field label\n                            type: 'select',\n                            options: ['all', 'current', 'days'],\n                            default: 'all',\n                        },\n                    ],\n                },\n                {\n                    name: 'private', // group name\n                    label: 'vis_2_widgets_template_private', // translated group label\n                    fields: [\n                        {\n                            name: 'oid',     // name in data structure\n                            type: 'id',\n                            label: 'vis_2_widgets_template_oid', // translated field label\n                        },\n                    ],\n                },\n                // check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\n            ],\n            visPrev: 'widgets/vis-2-widgets-react-template/img/vis-widget-demo.png',\n        };\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    propertiesUpdate() {\n        // Widget has 3 important states\n        // 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n        //                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n        // 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n        //                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n        // 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n        //                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n    }\n\n    componentDidMount() {\n        super.componentDidMount();\n\n        // Update data\n        this.propertiesUpdate();\n    }\n\n    // Do not delete this method. It is used by vis to read the widget configuration.\n    // eslint-disable-next-line class-methods-use-this\n    getWidgetInfo() {\n        return DemoWidget.getWidgetInfo();\n    }\n\n    // This function is called every time when rxData is changed\n    onRxDataChanged() {\n        this.propertiesUpdate();\n    }\n\n    // This function is called every time when rxStyle is changed\n    // eslint-disable-next-line class-methods-use-this\n    onRxStyleChanged() {\n\n    }\n\n    // This function is called every time when some Object State updated, but all changes lands into this.state.values too\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n    onStateUpdated(id, state) {\n\n    }\n\n    renderWidgetBody(props) {\n        super.renderWidgetBody(props);\n\n        return <Card style={{ width: '100%', height: '100%' }}>\n            <CardContent>\n                {I18n.t('My Demo ioBroker: ')}\n                {this.state.values[`${this.state.rxData.oid}.val`]}\n            </CardContent>\n        </Card>;\n    }\n}\n\nexport default DemoWidget;\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["DemoWidget","window","visRxWidget","VisRxWidget","getWidgetInfo","id","visSet","visSetLabel","visSetColor","visName","visAttrs","name","fields","label","type","options","default","visPrev","propertiesUpdate","componentDidMount","super","this","onRxDataChanged","onRxStyleChanged","onStateUpdated","state","renderWidgetBody","props","_jsx","Card","style","width","height","children","_jsxs","CardContent","I18n","t","values","concat","rxData","oid","f","require","k","Symbol","for","l","m","Object","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","a","g","b","d","e","h","call","defaultProps","$$typeof","_owner","current","exports","Fragment","jsx","jsxs","module"],"sourceRoot":""}